
// line 1 "PatternParser.rl"
// Do not edit this file! Generated by Ragel 6.10.
// Ragel.exe -J -o ../../../../../src/com/badlogic/gdx/utils/PatternParser.java PatternParser.rl
/*******************************************************************************
 * Copyright 2025 See AUTHORS file.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/

package com.badlogic.gdx.utils;

import static com.badlogic.gdx.utils.JsonMatcher.*;

import com.badlogic.gdx.utils.JsonMatcher.Match;
import com.badlogic.gdx.utils.JsonMatcher.Node;
import com.badlogic.gdx.utils.JsonMatcher.Pattern;
import com.badlogic.gdx.utils.JsonMatcher.Processor;

/** Parses {@link JsonMatcher} patterns.
 * @author Nathan Sweet */
class PatternParser {
	private static final java.util.regex.Pattern unescape = java.util.regex.Pattern.compile("\\\\(.)");

	final JsonMatcher matcher;
	Pattern pattern;
	private @Null Node root, prev, backtrack;
	private boolean processEach, hasCapture;

	PatternParser (JsonMatcher matcher, String text, @Null Processor processor) {
		this.matcher = matcher;
		char[] data = text.toCharArray();
		int cs, p = 0, pe = data.length, eof = pe;

		int s = 0, e = 0, c = -1;
		boolean escaped = false, quoted = false, star = false, starStar = false, brackets = false, at = false;
		Array<Match> matches = new Array(Match[]::new);

		try {

			// line 50 "../../../../../src/com/badlogic/gdx/utils/PatternParser.java"
			{
				cs = parser_start;
			}

			// line 54 "../../../../../src/com/badlogic/gdx/utils/PatternParser.java"
			{
				int _klen;
				int _trans = 0;
				int _acts;
				int _nacts;
				int _keys;
				int _goto_targ = 0;

				_goto:
				while (true) {
					switch (_goto_targ) {
					case 0:
						if (p == pe) {
							_goto_targ = 4;
							continue _goto;
						}
						if (cs == 0) {
							_goto_targ = 5;
							continue _goto;
						}
					case 1:
						_match:
						do {
							_keys = _parser_key_offsets[cs];
							_trans = _parser_index_offsets[cs];
							_klen = _parser_single_lengths[cs];
							if (_klen > 0) {
								int _lower = _keys;
								int _mid;
								int _upper = _keys + _klen - 1;
								while (true) {
									if (_upper < _lower) break;

									_mid = _lower + ((_upper - _lower) >> 1);
									if (data[p] < _parser_trans_keys[_mid])
										_upper = _mid - 1;
									else if (data[p] > _parser_trans_keys[_mid])
										_lower = _mid + 1;
									else {
										_trans += (_mid - _keys);
										break _match;
									}
								}
								_keys += _klen;
								_trans += _klen;
							}

							_klen = _parser_range_lengths[cs];
							if (_klen > 0) {
								int _lower = _keys;
								int _mid;
								int _upper = _keys + (_klen << 1) - 2;
								while (true) {
									if (_upper < _lower) break;

									_mid = _lower + (((_upper - _lower) >> 1) & ~1);
									if (data[p] < _parser_trans_keys[_mid])
										_upper = _mid - 2;
									else if (data[p] > _parser_trans_keys[_mid + 1])
										_lower = _mid + 2;
									else {
										_trans += ((_mid - _keys) >> 1);
										break _match;
									}
								}
								_trans += _klen;
							}
						} while (false);

						_trans = _parser_indicies[_trans];
						cs = _parser_trans_targs[_trans];

						if (_parser_trans_actions[_trans] != 0) {
							_acts = _parser_trans_actions[_trans];
							_nacts = (int)_parser_actions[_acts++];
							while (_nacts-- > 0) {
								switch (_parser_actions[_acts++]) {
								case 0:
								// line 51 "PatternParser.rl"
								{
									s = p;
								}
									break;
								case 1:
								// line 52 "PatternParser.rl"
								{
									e = p;
								}
									break;
								case 2:
								// line 53 "PatternParser.rl"
								{
									escaped = true;
								}
									break;
								case 3:
								// line 54 "PatternParser.rl"
								{
									quoted = true;
								}
									break;
								case 4:
								// line 55 "PatternParser.rl"
								{
									String name = new String(data, s, e - s);
									if (quoted) name = name.substring(1, name.length() - 1);
									if (escaped) name = unescape.matcher(name).replaceAll("$1");
									Match match = matcher.newMatch(name, at || processEach, brackets, star, starStar, c >= 0);
									matches.add(match);

									// All subsequent matches are processed right away.
									if (starStar && (match.flags & process) != 0) processEach = true;

									escaped = false;
									quoted = false;
									star = false;
									starStar = false;
									brackets = false;
									at = false;
								}
									break;
								case 5:
								// line 72 "PatternParser.rl"
								{
									star = true;
								}
									break;
								case 6:
								// line 73 "PatternParser.rl"
								{
									starStar = true;
								}
									break;
								case 7:
								// line 74 "PatternParser.rl"
								{
									brackets = true;
								}
									break;
								case 8:
								// line 75 "PatternParser.rl"
								{
									at = true;
								}
									break;
								case 9:
								// line 77 "PatternParser.rl"
								{
									c = matches.size;
								}
									break;
								case 10:
								// line 78 "PatternParser.rl"
								{
									c = -1;
									hasCapture = true;
								}
									break;
								case 11:
								// line 82 "PatternParser.rl"
								{
									for (int i = c, n = matches.size; i < n; i++)
										matches.get(i).flags |= process;
								}
									break;
								case 12:
								// line 87 "PatternParser.rl"
								{
									Node node = matcher.newNode(matches.toArray(), processEach, backtrack, prev);
									if (node.starStar) {
										if (matches.size > 1)
											throw new IllegalArgumentException("** cannot have other matches at the same level.");
										backtrack = node;
									}
									matches.clear();
									if (root == null) root = node.prev != null ? node.prev : node;
									prev = node;
								}
									break;
								// line 217 "../../../../../src/com/badlogic/gdx/utils/PatternParser.java"
								}
							}
						}

					case 2:
						if (cs == 0) {
							_goto_targ = 5;
							continue _goto;
						}
						if (++p != pe) {
							_goto_targ = 1;
							continue _goto;
						}
					case 4:
						if (p == eof) {
							int __acts = _parser_eof_actions[cs];
							int __nacts = (int)_parser_actions[__acts++];
							while (__nacts-- > 0) {
								switch (_parser_actions[__acts++]) {
								case 1:
								// line 52 "PatternParser.rl"
								{
									e = p;
								}
									break;
								case 3:
								// line 54 "PatternParser.rl"
								{
									quoted = true;
								}
									break;
								case 4:
								// line 55 "PatternParser.rl"
								{
									String name = new String(data, s, e - s);
									if (quoted) name = name.substring(1, name.length() - 1);
									if (escaped) name = unescape.matcher(name).replaceAll("$1");
									Match match = matcher.newMatch(name, at || processEach, brackets, star, starStar, c >= 0);
									matches.add(match);

									// All subsequent matches are processed right away.
									if (starStar && (match.flags & process) != 0) processEach = true;

									escaped = false;
									quoted = false;
									star = false;
									starStar = false;
									brackets = false;
									at = false;
								}
									break;
								case 10:
								// line 78 "PatternParser.rl"
								{
									c = -1;
									hasCapture = true;
								}
									break;
								case 12:
								// line 87 "PatternParser.rl"
								{
									Node node = matcher.newNode(matches.toArray(), processEach, backtrack, prev);
									if (node.starStar) {
										if (matches.size > 1)
											throw new IllegalArgumentException("** cannot have other matches at the same level.");
										backtrack = node;
									}
									matches.clear();
									if (root == null) root = node.prev != null ? node.prev : node;
									prev = node;
								}
									break;
								// line 286 "../../../../../src/com/badlogic/gdx/utils/PatternParser.java"
								}
							}
						}

					case 5:
					}
					break;
				}
			}

			// line 109 "PatternParser.rl"

			if (p < pe) {
				int start = Math.max(0, p - 32);
				throw new IllegalArgumentException("Error parsing pattern near: " + new String(data, start, p - start) + "ERROR"
					+ new String(data, p, Math.min(64, pe - p)));
			}

			if (!hasCapture) throw new IllegalArgumentException("A capture is required.");
			pattern = new Pattern(root, processor);
		} catch (Exception ex) {
			throw new IllegalArgumentException("Error parsing pattern: " + text, ex);
		}
	}

	// line 311 "../../../../../src/com/badlogic/gdx/utils/PatternParser.java"
	private static byte[] init__parser_actions_0 () {
		return new byte[] {0, 1, 0, 1, 1, 1, 2, 1, 4, 1, 6, 1, 7, 1, 8, 1, 9, 1, 10, 1, 11, 2, 0, 5, 2, 1, 4, 2, 1, 8, 2, 3, 1, 2,
			4, 12, 2, 10, 12, 3, 1, 4, 12, 3, 3, 1, 4, 3, 3, 1, 8, 4, 3, 1, 4, 12};
	}

	private static final byte _parser_actions[] = init__parser_actions_0();

	private static byte[] init__parser_key_offsets_0 () {
		return new byte[] {0, 0, 9, 10, 12, 14, 16, 25, 34, 36, 37, 40, 42, 46, 48, 50, 55, 59, 67, 69, 72, 76, 79, 81, 86};
	}

	private static final byte _parser_key_offsets[] = init__parser_key_offsets_0();

	private static char[] init__parser_trans_keys_0 () {
		return new char[] {39, 40, 41, 42, 44, 47, 64, 91, 93, 93, 39, 92, 39, 92, 39, 92, 39, 42, 44, 47, 64, 40, 41, 91, 93, 41,
			44, 47, 64, 91, 39, 42, 92, 93, 41, 44, 93, 41, 44, 64, 39, 92, 41, 44, 64, 91, 39, 92, 39, 92, 41, 42, 44, 64, 91, 41,
			44, 64, 91, 44, 47, 64, 91, 39, 42, 92, 93, 44, 47, 44, 47, 64, 44, 47, 64, 91, 44, 47, 64, 44, 47, 42, 44, 47, 64, 91,
			44, 47, 64, 91, 0};
	}

	private static final char _parser_trans_keys[] = init__parser_trans_keys_0();

	private static byte[] init__parser_single_lengths_0 () {
		return new byte[] {0, 7, 1, 2, 2, 2, 5, 5, 2, 1, 3, 2, 4, 2, 2, 5, 4, 4, 2, 3, 4, 3, 2, 5, 4};
	}

	private static final byte _parser_single_lengths[] = init__parser_single_lengths_0();

	private static byte[] init__parser_range_lengths_0 () {
		return new byte[] {0, 1, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0};
	}

	private static final byte _parser_range_lengths[] = init__parser_range_lengths_0();

	private static byte[] init__parser_index_offsets_0 () {
		return new byte[] {0, 0, 9, 11, 14, 17, 20, 28, 36, 39, 41, 45, 48, 53, 56, 59, 65, 70, 77, 80, 84, 89, 93, 96, 102};
	}

	private static final byte _parser_index_offsets[] = init__parser_index_offsets_0();

	private static byte[] init__parser_indicies_0 () {
		return new byte[] {1, 2, 4, 3, 4, 4, 4, 4, 0, 5, 4, 7, 8, 6, 9, 9, 4, 11, 12, 10, 14, 15, 4, 4, 4, 4, 4, 13, 17, 18, 4, 19,
			20, 4, 4, 16, 21, 22, 4, 23, 4, 21, 22, 24, 4, 26, 27, 25, 28, 29, 30, 31, 4, 32, 32, 4, 34, 35, 33, 17, 36, 18, 19, 20,
			4, 17, 18, 19, 20, 4, 38, 39, 40, 41, 4, 4, 37, 42, 43, 4, 42, 43, 44, 4, 45, 46, 47, 48, 4, 49, 50, 51, 4, 49, 50, 4,
			52, 38, 39, 40, 41, 4, 38, 39, 40, 41, 4, 0};
	}

	private static final byte _parser_indicies[] = init__parser_indicies_0();

	private static byte[] init__parser_trans_targs_0 () {
		return new byte[] {17, 3, 6, 23, 0, 19, 3, 20, 4, 5, 3, 20, 4, 7, 11, 15, 7, 21, 6, 8, 9, 21, 6, 10, 8, 11, 12, 13, 21, 6,
			8, 9, 14, 11, 12, 13, 16, 17, 1, 1, 18, 2, 1, 1, 18, 1, 1, 18, 2, 1, 1, 22, 24};
	}

	private static final byte _parser_trans_targs[] = init__parser_trans_targs_0();

	private static byte[] init__parser_trans_actions_0 () {
		return new byte[] {1, 1, 15, 21, 0, 11, 0, 0, 0, 0, 5, 5, 5, 1, 1, 21, 0, 24, 24, 27, 3, 7, 7, 11, 13, 0, 0, 0, 43, 43, 47,
			30, 0, 5, 5, 5, 9, 0, 24, 39, 27, 3, 7, 33, 13, 43, 51, 47, 30, 17, 36, 19, 9};
	}

	private static final byte _parser_trans_actions[] = init__parser_trans_actions_0();

	private static byte[] init__parser_eof_actions_0 () {
		return new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 33, 33, 51, 36, 36, 39, 39};
	}

	private static final byte _parser_eof_actions[] = init__parser_eof_actions_0();

	static final int parser_start = 1;

	// line 125 "PatternParser.rl"
}
